{"ast":null,"code":"var _classCallCheck = require(\"C:\\\\Users\\\\pc\\\\react-socketio-tic-tac-toe\\\\react-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\pc\\\\react-socketio-tic-tac-toe\\\\react-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\pc\\\\react-socketio-tic-tac-toe\\\\react-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\pc\\\\react-socketio-tic-tac-toe\\\\react-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"C:\\\\Users\\\\pc\\\\react-socketio-tic-tac-toe\\\\react-client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\nvar Transport = require(\"../transport\");\nvar parser = require(\"engine.io-parser\");\nvar parseqs = require(\"parseqs\");\nvar yeast = require(\"yeast\");\nvar _require = require(\"../util\"),\n  pick = _require.pick;\nvar _require2 = require(\"./websocket-constructor\"),\n  WebSocket = _require2.WebSocket,\n  usingBrowserWebSocket = _require2.usingBrowserWebSocket,\n  defaultBinaryType = _require2.defaultBinaryType,\n  nextTick = _require2.nextTick;\nvar debug = require(\"debug\")(\"engine.io-client:websocket\");\n\n// detect ReactNative environment\nvar isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nvar WS = /*#__PURE__*/function (_Transport) {\n  \"use strict\";\n\n  _inherits(WS, _Transport);\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  function WS(opts) {\n    var _this;\n    _classCallCheck(this, WS);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WS).call(this, opts));\n    _this.supportsBinary = !opts.forceBase64;\n    return _this;\n  }\n\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n  _createClass(WS, [{\n    key: \"doOpen\",\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    value: function doOpen() {\n      if (!this.check()) {\n        // let probe timeout\n        return;\n      }\n      var uri = this.uri();\n      var protocols = this.opts.protocols;\n\n      // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n      var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n      if (this.opts.extraHeaders) {\n        opts.headers = this.opts.extraHeaders;\n      }\n      try {\n        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n      } catch (err) {\n        return this.emit(\"error\", err);\n      }\n      this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n      this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      var _this2 = this;\n      this.ws.onopen = function () {\n        if (_this2.opts.autoUnref) {\n          _this2.ws._socket.unref();\n        }\n        _this2.onOpen();\n      };\n      this.ws.onclose = this.onClose.bind(this);\n      this.ws.onmessage = function (ev) {\n        return _this2.onData(ev.data);\n      };\n      this.ws.onerror = function (e) {\n        return _this2.onError(\"websocket error\", e);\n      };\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var _this3 = this;\n      this.writable = false;\n\n      // encodePacket efficient as it uses WS framing\n      // no need for encodePayload\n      var _loop = function _loop(i) {\n        var packet = packets[i];\n        var lastPacket = i === packets.length - 1;\n        parser.encodePacket(packet, _this3.supportsBinary, function (data) {\n          // always create a new object (GH-437)\n          var opts = {};\n          if (!usingBrowserWebSocket) {\n            if (packet.options) {\n              opts.compress = packet.options.compress;\n            }\n            if (_this3.opts.perMessageDeflate) {\n              var len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n              if (len < _this3.opts.perMessageDeflate.threshold) {\n                opts.compress = false;\n              }\n            }\n          }\n\n          // Sometimes the websocket has already been closed but the browser didn't\n          // have a chance of informing us about it yet, in that case send will\n          // throw an error\n          try {\n            if (usingBrowserWebSocket) {\n              // TypeError is thrown when passing the second argument on Safari\n              _this3.ws.send(data);\n            } else {\n              _this3.ws.send(data, opts);\n            }\n          } catch (e) {\n            debug(\"websocket closed before onclose event\");\n          }\n          if (lastPacket) {\n            // fake drain\n            // defer to next tick to allow Socket to clear writeBuffer\n            nextTick(function () {\n              _this3.writable = true;\n              _this3.emit(\"drain\");\n            });\n          }\n        });\n      };\n      for (var i = 0; i < packets.length; i++) {\n        _loop(i);\n      }\n    }\n    /**\n     * Called upon close\n     *\n     * @api private\n     */\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      Transport.prototype.onClose.call(this);\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      if (typeof this.ws !== \"undefined\") {\n        this.ws.close();\n        this.ws = null;\n      }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"wss\" : \"ws\";\n      var port = \"\";\n\n      // avoid port if default for schema\n      if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      }\n\n      // append timestamp to URI\n      if (this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      }\n\n      // communicate binary support capabilities\n      if (!this.supportsBinary) {\n        query.b64 = 1;\n      }\n      query = parseqs.encode(query);\n\n      // prepend ? to query\n      if (query.length) {\n        query = \"?\" + query;\n      }\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n  }, {\n    key: \"check\",\n    value: function check() {\n      return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"websocket\";\n    }\n  }]);\n  return WS;\n}(Transport);\nmodule.exports = WS;","map":null,"metadata":{},"sourceType":"script"}