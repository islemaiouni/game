{"ast":null,"code":"class GameService {\n  async joinGameRoom(socket, roomId) {\n    return new Promise((rs, rj) => {\n      socket.emit(\"join_game\", {\n        roomId\n      });\n      socket.on(\"room_joined\", () => rs(true));\n      socket.on(\"room_join_error\", _ref => {\n        let {\n          error\n        } = _ref;\n        return rj(error);\n      });\n    });\n  }\n  async updateGame(socket, gameMatrix) {\n    socket.emit(\"update_game\", {\n      matrix: gameMatrix\n    });\n  }\n  async onGameUpdate(socket, listiner) {\n    socket.on(\"on_game_update\", _ref2 => {\n      let {\n        matrix\n      } = _ref2;\n      return listiner(matrix);\n    });\n  }\n  async onStartGame(socket, listiner) {\n    socket.on(\"start_game\", listiner);\n  }\n  async gameWin(socket, message) {\n    socket.emit(\"game_win\", {\n      message\n    });\n  }\n  async onGameWin(socket, listiner) {\n    socket.on(\"on_game_win\", _ref3 => {\n      let {\n        message\n      } = _ref3;\n      return listiner(message);\n    });\n  }\n}\nexport default new GameService();","map":{"version":3,"names":["GameService","joinGameRoom","socket","roomId","Promise","rs","rj","emit","on","error","updateGame","gameMatrix","matrix","onGameUpdate","listiner","onStartGame","gameWin","message","onGameWin"],"sources":["C:/Users/pc/react-socketio-tic-tac-toe/react-client/src/services/gameService/index.ts"],"sourcesContent":["import { Socket } from \"socket.io-client\";\nimport { IPlayMatrix, IStartGame } from \"../../components/game\";\n\nclass GameService {\n  public async joinGameRoom(socket: Socket, roomId: string): Promise<boolean> {\n    return new Promise((rs, rj) => {\n      socket.emit(\"join_game\", { roomId });\n      socket.on(\"room_joined\", () => rs(true));\n      socket.on(\"room_join_error\", ({ error }) => rj(error));\n    });\n  }\n\n  public async updateGame(socket: Socket, gameMatrix: IPlayMatrix) {\n    socket.emit(\"update_game\", { matrix: gameMatrix });\n  }\n\n  public async onGameUpdate(\n    socket: Socket,\n    listiner: (matrix: IPlayMatrix) => void\n  ) {\n    socket.on(\"on_game_update\", ({ matrix }) => listiner(matrix));\n  }\n\n  public async onStartGame(\n    socket: Socket,\n    listiner: (options: IStartGame) => void\n  ) {\n    socket.on(\"start_game\", listiner);\n  }\n\n  public async gameWin(socket: Socket, message: string) {\n    socket.emit(\"game_win\", { message });\n  }\n\n  public async onGameWin(socket: Socket, listiner: (message: string) => void) {\n    socket.on(\"on_game_win\", ({ message }) => listiner(message));\n  }\n}\n\nexport default new GameService();\n"],"mappings":"AAGA,MAAMA,WAAW,CAAC;EAChB,MAAaC,YAAY,CAACC,MAAc,EAAEC,MAAc,EAAoB;IAC1E,OAAO,IAAIC,OAAO,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAK;MAC7BJ,MAAM,CAACK,IAAI,CAAC,WAAW,EAAE;QAAEJ;MAAO,CAAC,CAAC;MACpCD,MAAM,CAACM,EAAE,CAAC,aAAa,EAAE,MAAMH,EAAE,CAAC,IAAI,CAAC,CAAC;MACxCH,MAAM,CAACM,EAAE,CAAC,iBAAiB,EAAE;QAAA,IAAC;UAAEC;QAAM,CAAC;QAAA,OAAKH,EAAE,CAACG,KAAK,CAAC;MAAA,EAAC;IACxD,CAAC,CAAC;EACJ;EAEA,MAAaC,UAAU,CAACR,MAAc,EAAES,UAAuB,EAAE;IAC/DT,MAAM,CAACK,IAAI,CAAC,aAAa,EAAE;MAAEK,MAAM,EAAED;IAAW,CAAC,CAAC;EACpD;EAEA,MAAaE,YAAY,CACvBX,MAAc,EACdY,QAAuC,EACvC;IACAZ,MAAM,CAACM,EAAE,CAAC,gBAAgB,EAAE;MAAA,IAAC;QAAEI;MAAO,CAAC;MAAA,OAAKE,QAAQ,CAACF,MAAM,CAAC;IAAA,EAAC;EAC/D;EAEA,MAAaG,WAAW,CACtBb,MAAc,EACdY,QAAuC,EACvC;IACAZ,MAAM,CAACM,EAAE,CAAC,YAAY,EAAEM,QAAQ,CAAC;EACnC;EAEA,MAAaE,OAAO,CAACd,MAAc,EAAEe,OAAe,EAAE;IACpDf,MAAM,CAACK,IAAI,CAAC,UAAU,EAAE;MAAEU;IAAQ,CAAC,CAAC;EACtC;EAEA,MAAaC,SAAS,CAAChB,MAAc,EAAEY,QAAmC,EAAE;IAC1EZ,MAAM,CAACM,EAAE,CAAC,aAAa,EAAE;MAAA,IAAC;QAAES;MAAQ,CAAC;MAAA,OAAKH,QAAQ,CAACG,OAAO,CAAC;IAAA,EAAC;EAC9D;AACF;AAEA,eAAe,IAAIjB,WAAW,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}